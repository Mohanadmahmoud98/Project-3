version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID:
       type: string      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.ID >> --recursive
            aws cloudformation delete-stack --stack-name backend-<< parameters.ID >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workID:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: << parameters.workID >>" --request GET https://api.memstash.io/values/status)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm audit fix
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm run test 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
        
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text >> .circleci/ansible/inventory.txt
      - run: 
          name: add viable in env file
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
      - run: yum -y install tar gzip 
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
            - backend/
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["26:2f:64:21:06:3d:17:e9:59:cc:f2:6f:52:62:50:80"]
      - attach_workspace:
          at: ~/project 
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            echo "content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID}            
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm run migrations > migration.txt
            echo "the migration file"
            cat migration.txt
            echo "the env file"
            
            
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully" migration.txt
            then
             curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/status
            
            else
             curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/status
            fi
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID} 
      - revert-migrations:
          workID: ${CIRCLE_WORKFLOW_ID}       
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update
            yum upgrade
            yum install sudo -y
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash - 
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            cd frontend
            BACKEND_IP=$(aws ec2 describe-instances \
                          --query 'Reservations[*].Instances[*].PublicIpAddress' \
                          --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                          --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm audit fix
            BACKEND_IP=$(aws ec2 describe-instances \
                          --query 'Reservations[*].Instances[*].PublicIpAddress' \
                          --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                          --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "again"
            echo "${API_URL}"
            echo API_URL=$API_URL > .env
            npm run build
            echo "show .env"
            cat .env
            cd dist
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID} --delete

      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID} 
      - revert-migrations:
          workID: ${CIRCLE_WORKFLOW_ID}    
          
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["26:2f:64:21:06:3d:17:e9:59:cc:f2:6f:52:62:50:80"]
      - attach_workspace:
          at: ~/project
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs npm tar gzip
      - run:
          name: Deploy backend
          no_output_timeout: 160m
          command: |
            cd backend
            npm i
            npm run build
            echo ENVIRONMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo "env file"
            cat .env            
            echo "check dist file"
            cd ../
            tar -C backend -czvf backendartifact.tar.gz .
            cd .circleci/ansible
            echo "content"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml  
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID} 
      - revert-migrations:
          workID: ${CIRCLE_WORKFLOW_ID}  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
                          --query 'Reservations[*].Instances[*].PublicIpAddress' \
                          --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                          --output text)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            curl ${API_URL}
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s "http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi 
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo Old Workflow Id:${OLD_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "${OLD_WORKFLOW_ID}" https://api.memstash.io/values/workflowID
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "cloudfront-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID} 
      - revert-migrations:
          workID: ${CIRCLE_WORKFLOW_ID}  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
             --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Old Workflow Id:${OLD_WORKFLOW_ID}
            echo "New id:${CIRCLE_WORKFLOW_ID:0:4}"
            echo ${STACKS}
            echo "Deleting stacks with Old Worflow ID: ${OLD_WORKFLOW_ID}"
            aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID} --recursive
            aws cloudformation delete-stack --stack-name backend-${OLD_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name frontend-${OLD_WORKFLOW_ID}
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID} 
      - revert-migrations:
          workID: ${CIRCLE_WORKFLOW_ID}
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      