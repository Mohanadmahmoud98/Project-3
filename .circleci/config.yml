 version: 2.1


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm audit fix
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm run test 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
        
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=mytag-${CIRCLE_WORKFLOW_ID} \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=mytag-${CIRCLE_WORKFLOW_ID} \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=mytag-${CIRCLE_WORKFLOW_ID}" \
              --output text >> .circleci/ansible/inventory.txt
      - run: 
          name: add viable in env file
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=postgres > backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts > backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST > backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT > backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME > backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD > backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE > backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts > "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations > "backend/.env"
      - run: yum -y install tar gzip 
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      
